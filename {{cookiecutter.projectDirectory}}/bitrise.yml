---
format_version: '4'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
trigger_map:
- push_branch: development
  workflow: dev
- push_branch: main
  workflow: main
- push_branch: testflight
  workflow: testflight
- pull_request_source_branch: "*"
  workflow: main
  pull_request_target_branch: main
workflows:
  _kickstart:
    steps:
    - activate-ssh-key:
        {% raw %}run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'{% endraw %}
    - git-clone:
        inputs:
        - clone_depth: '1'
    - cache-pull: {}
    - brew-install:
        inputs:
        - upgrade: 'no'
        - cache_enabled: 'yes'
        - packages: mono0926/license-plist/license-plist
        title: 'Brew install: LicensePlist'
    - brew-install:
        inputs:
        - upgrade: 'no'
        - cache_enabled: 'yes'
        - packages: swiftgen
        title: 'Brew install: SwiftGen'
    - brew-install:
        title: 'Brew install: XcodeGen'
        inputs:
        - upgrade: 'no'
        - cache_enabled: 'yes'
        - packages: xcodegen
    - yarn:
        inputs:
        - command: global add texterify
        title: Install Texterify CLI
    - script:
        title: Update Texterify Strings
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # make pipelines' return status equal the last command to exit with a non-zero status, or zero if all commands exit successfully
            set -o pipefail
            # debug log
            set -x

            # write your script here
            # download texterify strings
            if texterify download --auth-email="$AAA_TXTY_AUTH_EMAIL" --auth-secret="$AAA_TXTY_AUTH_SECRET"
            then
                # generate strings
                swiftgen
            else
                BRed='\033[1;31m' # Red Bold
                NC='\033[0m' # No Color
                echo -e "${BRed} Texterify Download failed! Check texterify.json if the project_id is correctly set up. ${NC}"
            fi

            exit 0
    - cache-push: {}
    - remote-script-runner:
        inputs:
        - script_url: https://public.allaboutapps.at/bitrise/ios-last-commit-date.sh
    - set-xcode-build-number:
        inputs:
        - build_version_offset: ''
        - build_version: "$AAA_LAST_COMMIT_DATE"
        - plist_path: "$AAA_INFO_PLIST_PATH"
  dev:
    steps:
    - xcode-archive:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - export_method: development
        - is_clean_build: 'yes'
        - automatic_code_signing: api-key
        - register_test_devices: 'yes'
        - artifact_name: {{cookiecutter.projectName}}-Dev
        - scheme: "$BITRISE_SCHEME_DEV"
        title: Dev - Xcode Archive & Export
    - deploy-to-bitrise-io:
        title: Deploy to Bitrise.io
    - remote-script-runner:
        inputs:
        - script_url: https://public.allaboutapps.at/bitrise/ios-push-tag.sh
        title: Push Version Tag
    before_run:
    - _kickstart
  main:
    steps:
    - xcode-archive:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - export_method: development
        - is_clean_build: 'yes'
        - automatic_code_signing: api-key
        - register_test_devices: 'yes'
        - artifact_name: {{cookiecutter.projectName}}-Staging
        - scheme: "$BITRISE_SCHEME_STAGING"
        title: Staging - Xcode Archive & Export
    - xcode-archive:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - export_method: development
        - is_clean_build: 'yes'
        - automatic_code_signing: api-key
        - register_test_devices: 'yes'
        - artifact_name: {{cookiecutter.projectName}}-Live
        - scheme: "$BITRISE_SCHEME_LIVE"
        title: Live - Xcode Archive & Export
    - deploy-to-bitrise-io:
        title: Deploy to Bitrise.io
    - remote-script-runner:
        inputs:
        - script_url: https://public.allaboutapps.at/bitrise/ios-push-tag.sh
        title: Push Version Tag
    before_run:
    - _kickstart
  testflight:
    steps:
    - xcode-archive:
        inputs:
        - project_path: "$BITRISE_PROJECT_PATH"
        - export_method: app-store
        - is_clean_build: 'yes'
        - automatic_code_signing: api-key
        - register_test_devices: 'yes'
        - distribution_method: app-store
        - scheme: "$BITRISE_SCHEME_LIVE"
    - deploy-to-itunesconnect-application-loader:
        inputs:
        - connection: api_key
        - app_password: "$AAA_APP_SPECIFIC_PW"
    - remote-script-runner:
        inputs:
        - script_url: https://public.allaboutapps.at/bitrise/ios-push-tag.sh
        title: Push Version Tag
    before_run:
    - _kickstart
app:
  envs:
  - BITRISE_PROJECT_PATH: {{cookiecutter.projectName}}.xcodeproj
  - BITRISE_SCHEME_LIVE: {{cookiecutter.projectName}} Live
  - BITRISE_SCHEME_DEV: {{cookiecutter.projectName}} Dev
  - BITRISE_SCHEME_STAGING: {{cookiecutter.projectName}} Staging
  - AAA_INFO_PLIST_PATH: "$BITRISE_SOURCE_DIR/{{cookiecutter.projectName}}/SupportingFiles/Info.plist"
  - AAA_APP_BUNDLE_ID_LIVE: {{cookiecutter.bundleIdentifier}}
  - AAA_APP_BUNDLE_ID_DEV: {{cookiecutter.bundleIdentifier}}-dev
  - AAA_APP_BUNDLE_ID_STAGING: {{cookiecutter.bundleIdentifier}}-staging
  - AAA_ITUNES_TEAM: {{cookiecutter.teamName}}
  - AAA_DEV_TEAM_ID: {{cookiecutter.teamId}}
  - GIT_SSH_COMMAND: ssh -o PubkeyAcceptedAlgorithms=+ssh-rsa
